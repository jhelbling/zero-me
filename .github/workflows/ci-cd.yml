name: Deploy Client Infrastructure with ZeroTier Controller and ZTAdmin

on:
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client name'
        required: true
      client_domain:
        description: 'Client domain'
        required: true
      client_tunnel_name:
        description: 'Cloudflare Tunnel name for the client'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      run: terraform init
      working-directory: ./terraform

    - name: Create ZeroTier Network via ZTAdmin
      id: create_network
      run: |
        ZTADMIN_API_URL="http://your-ztadmin-url:8080/api"
        ZTADMIN_API_KEY=${{ secrets.ZTADMIN_API_KEY }}

        response=$(curl -X POST "$ZTADMIN_API_URL/networks" \
        -H "Authorization: Bearer $ZTADMIN_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{
              "name": "${{ github.event.inputs.client_name }}_network",
              "private": true
            }')

        # Extract Network ID from the API response
        network_id=$(echo $response | jq -r '.id')

        # Save the Network ID to the GitHub environment file
        echo "network_id=$network_id" >> $GITHUB_ENV

    - name: Terraform Apply
      env:
        CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
      run: terraform apply -auto-approve \
           -var "client_name=${{ github.event.inputs.client_name }}" \
           -var "client_domain=${{ github.event.inputs.client_domain }}" \
           -var "client_tunnel_name=${{ github.event.inputs.client_tunnel_name }}" \
           -var "zerotier_network_id=${{ env.network_id }}"  # Use the environment variable created earlier
      working-directory: ./terraform
